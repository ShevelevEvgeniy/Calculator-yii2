/*
 * API Калькулятор расчета стоимости доставки
 * *Калькулятор расчета стоимости доставки* - сервис расчета стоимости доставки ### возможности сервиса   - расчет стоимости доставки   - реестр месяцев доставки   - реестр тоннажей доставки   - реестр типов сырья доставки   - реестр стоимости доставки  Разработчик [{Евгений Шевелев}] ({https://gitlab-dev.efko.ru/}) 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CalculateApi {
    private ApiClient localVarApiClient;

    public CalculateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CalculateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiV1CalculateGet
     * @param month  (required)
     * @param type  (required)
     * @param tonnage  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1CalculateGetCall(String month, String type, Integer tonnage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/calculate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (tonnage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tonnage", tonnage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1CalculateGetValidateBeforeCall(String month, String type, Integer tonnage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling apiV1CalculateGet(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling apiV1CalculateGet(Async)");
        }
        
        // verify the required parameter 'tonnage' is set
        if (tonnage == null) {
            throw new ApiException("Missing the required parameter 'tonnage' when calling apiV1CalculateGet(Async)");
        }
        

        okhttp3.Call localVarCall = apiV1CalculateGetCall(month, type, tonnage, _callback);
        return localVarCall;

    }

    /**
     * Рассчитать цену
     * 
     * @param month  (required)
     * @param type  (required)
     * @param tonnage  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1CalculateGet(String month, String type, Integer tonnage) throws ApiException {
        apiV1CalculateGetWithHttpInfo(month, type, tonnage);
    }

    /**
     * Рассчитать цену
     * 
     * @param month  (required)
     * @param type  (required)
     * @param tonnage  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1CalculateGetWithHttpInfo(String month, String type, Integer tonnage) throws ApiException {
        okhttp3.Call localVarCall = apiV1CalculateGetValidateBeforeCall(month, type, tonnage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Рассчитать цену (asynchronously)
     * 
     * @param month  (required)
     * @param type  (required)
     * @param tonnage  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1CalculateGetAsync(String month, String type, Integer tonnage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1CalculateGetValidateBeforeCall(month, type, tonnage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
