/*
 * API Калькулятор расчета стоимости доставки
 * *Калькулятор расчета стоимости доставки* - сервис расчета стоимости доставки ### возможности сервиса   - расчет стоимости доставки   - реестр месяцев доставки   - реестр тоннажей доставки   - реестр типов сырья доставки   - реестр стоимости доставки  Разработчик [{Евгений Шевелев}] ({https://gitlab-dev.efko.ru/}) 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.UNKNOWN_BASE_TYPE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TypesApi {
    private ApiClient localVarApiClient;

    public TypesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TypesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiV1TypesDelete
     * @param type  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> успешное удаление </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TypesDeleteCall(String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1TypesDeleteValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling apiV1TypesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = apiV1TypesDeleteCall(type, _callback);
        return localVarCall;

    }

    /**
     * Удалить тип сырья по значению
     * 
     * @param type  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> успешное удаление </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1TypesDelete(String type) throws ApiException {
        apiV1TypesDeleteWithHttpInfo(type);
    }

    /**
     * Удалить тип сырья по значению
     * 
     * @param type  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> успешное удаление </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1TypesDeleteWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = apiV1TypesDeleteValidateBeforeCall(type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удалить тип сырья по значению (asynchronously)
     * 
     * @param type  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> успешное удаление </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TypesDeleteAsync(String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1TypesDeleteValidateBeforeCall(type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1TypesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TypesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1TypesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV1TypesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Получить список типов сырья
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1TypesGet() throws ApiException {
        apiV1TypesGetWithHttpInfo();
    }

    /**
     * Получить список типов сырья
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1TypesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1TypesGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Получить список типов сырья (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TypesGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1TypesGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1TypesPost
     * @param UNKNOWN_BASE_TYPE Данные типа сырья для добавления (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> успешное добавление </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TypesPostCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/api/v1/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1TypesPostValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
        if (UNKNOWN_BASE_TYPE == null) {
            throw new ApiException("Missing the required parameter 'UNKNOWN_BASE_TYPE' when calling apiV1TypesPost(Async)");
        }
        

        okhttp3.Call localVarCall = apiV1TypesPostCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Добавить тип сырья
     * 
     * @param UNKNOWN_BASE_TYPE Данные типа сырья для добавления (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> успешное добавление </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1TypesPost(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        apiV1TypesPostWithHttpInfo(UNKNOWN_BASE_TYPE);
    }

    /**
     * Добавить тип сырья
     * 
     * @param UNKNOWN_BASE_TYPE Данные типа сырья для добавления (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> успешное добавление </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1TypesPostWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = apiV1TypesPostValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Добавить тип сырья (asynchronously)
     * 
     * @param UNKNOWN_BASE_TYPE Данные типа сырья для добавления (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> успешное добавление </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> не авторизован </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TypesPostAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1TypesPostValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
